#! /usr/bin/env python

#######################################################################
##
##	Peter M.U. Ung @ MSSM
##	
##	v1.0	- 13.11.13
##	v2.0	- 13.11.20 - add FRED tag to file name of future process
##			     FRED score is 1 decimal place
##	v3.0	- 13.11.25 - change to output number based on SDF, not score
##			     file
##
##	Take the .fred_score.txt generated by OpenEye FRED docking
##	to rank the molecules.
##	While ranking the molecules, read in the SDF files to generate the
##	consolidated SDF file with ranked molecules
##
##	Print out the top-ranking sdf molecules and generate a histogram	
##
##	Required:	fred_screen_preprocess.py
##			*.fred_score.txt
##			*.docked.sdf
##
#######################################################################

import sys
import glob
import re

if len(sys.argv) != 5:
    MSG = '''\n  ## Usage: x.py [FRED score files] [FRED sdf files] 
                 [all top num] 
                 [Prefix of Output sdf, png, and txt files] ##
                 e.g.: x.py "*.fred_score.txt",aa.1.fred_score.txt "*.sdf" 
                 1000 ksr-allost\n'''
    sys.exit(MSG)

import numpy as np
import matplotlib.pyplot as plt
from rdkit import Chem

############################################################################
def doit(all_top):
    File_Names = []
    SDF_Names  = []
    All_Data   = []
    All_Histo  = []    
    prefix     = sys.argv[4]

    # Read in .fred_score.txt
    for name in sys.argv[1].split(','):
        File_Names[:0] = glob.glob(name)
        print "Score File: "
        print File_Names

    # Read in SDF file name
    for sdf_file in sys.argv[2].split(','):
        SDF_Names[:0] = glob.glob(sdf_file)
        print "SDF File: "
        print SDF_Names

    ## From the .fred_score.txt, extract the scores for ranking
    for file_name in File_Names:

        print 'file_name: '+file_name
        ## FILE PREFIX SELECTION MAY NEED MANUAL CHANGES ACCORDING TO 
        ## FILE NAMING CONVENTION
        Name_Pref = file_name.split('.')
        file_pref = Name_Pref[0]+'.'+str(Name_Pref[1])

        with open(file_name, 'rh') as f:
            for idx, line in enumerate(f):
                if re.search(r'Title', line): print "Reading..."
                else:
                  score = float(line.split()[1])
                  name  = str  (line.split()[0])
                  All_Data.append([score, name])
                  All_Histo.append(score)

    	# Print the file number for every 1000 read
                if idx % 1000 == 0: print idx

    All_Data.sort(lambda x,y: cmp(float(x[0]), float(y[0])))
    histogram(All_Histo, All_Data, len(All_Data), prefix, all_top)
    print "\n  ## Finished plotting overall Top-Ranks ##\n\n"

    ## Read in top SDF files and build ranked SDF file
    make_sdf(SDF_Names, All_Data, all_top, prefix)


#######################################################################
## Build a database of molecules from SDF files
def make_sdf(SDF_Names, All_Data, all_top, prefix):
  from rdkit import Chem

  ## Build a database of molecules from SDF files
  All_sdf = {}
  print "  ## Output Total: "+str(all_top)

  for Mol_List in SDF_Names:
    for mol in Chem.ForwardSDMolSupplier(Mol_List):
      if mol is not None:
        if re.search(r'_', mol.GetProp("_Name")):
          All_sdf[mol.GetProp("_Name").split('_')[0]] = mol
	else:
          All_sdf[mol.GetProp("_Name")] = mol
    print "  # SDF mol read in: "+str(len(All_sdf))

  count = 0
  ## Use the Ranked list to rebuild a consolidated SDF 
  w   = Chem.SDWriter(prefix+'.fred_top'+str(all_top)+'.sdf')
  OUT = open(prefix+".fred_top"+str(all_top)+".txt", 'w')
  for rank, List in enumerate(All_Data):
    name  = List[1].split('_')[0]
#    name  = List[1]
    score = List[0]

    if All_sdf.get(name):
      mol = All_sdf[name]
      OUT.write(str(rank+1)+"    "+List[1]+"   "+str(List[0])+"\n")
    else:
      count += 1 
      continue
                ## (ZINC, Rank, Score, FRED)   
    mol.SetProp("_Name", name+'::'+str(rank+1)+'::'+str("%.1f" % float(score))+'::FRED')
    w.write(mol)
    if rank == all_top-1+count: 
      print rank
      OUT.close()
      w.close()
      break
  

#######################################################################
## Plot Histogram of Score distribution
def histogram(Histo, Part, num_mol, name, top):
    bin_upper = -14.0
    bin_lower = -3.0
    bin_size  = 0.2
    text_high = num_mol/7.5
    text_hori = 0.3
   
    i = bin_upper
    Bins_Range = []
    while i < bin_lower:
        Bins_Range.append(i)
        i = i+bin_size

    fig, ax = plt.subplots()
    plt.figure(num=1, figsize=(8,6), dpi=150)

    ax.hist(Histo, Bins_Range, histtype='step', color='0.25')
    plt.xlabel('FRED Score')
    plt.ylabel('No. of Molecule')
    plt.title( name+": "+str(num_mol) )

    ## Draw a vertical line to indicate the Top hits
    ax.axvline( x=Part[top-1][0], ymin=0, ymax=1000, 
                color='r', linewidth=2 )
    top_num = 'Top '+str(top)+': '+str(Part[top-1][0])
    ax.text( Part[top-1][0]-text_hori, text_high, 
             top_num, rotation=90, color='b' )

    ## Draw a vertical line to indicate the Median Score
    ax.axvline( x=np.median(Histo), ymin=0, ymax=1000, 
                color='b', linewidth=2 )
    median = 'Median: '+str(np.median(Histo))
    ax.text( np.median(Histo)-text_hori, text_high, 
             median, rotation=90, color='b' )

    ## Draw 2 vertical lines to indicate the standard deviation
    ax.axvline( x=(np.median(Histo)+np.std(Histo)), 
                ymin=0, ymax=1000, color='k', linewidth=1.2 )
    ax.axvline( x=(np.median(Histo)-np.std(Histo)), 
                ymin=0, ymax=1000, color='k', linewidth=1.2 )
    stdev = 'StDev: '+str(np.around(np.std(Histo), decimals=2) )
    ax.text( np.median(Histo)+np.std(Histo)-text_hori, text_high, 
             stdev, rotation=90, color='k' )

#    plt.show()
    plt.savefig( name+'.fred_top'+str(top)+'.histo.png', dpi=150 )
    plt.close()


############################################################################
if __name__ == '__main__':
    doit(int(sys.argv[3]))
