#! /usr/bin/env python

#######################################################################
##
##	Peter M.U. Ung @ MSSM
##	
##	v1.0	- 13.11.13
##	v2.0	- 13.11.20 - add FRED tag to file name for future process
##			     FRED score is 1 decimal place
##	v3.0	- 13.11.25 - change to output number based on SDF, not score
##			     file
##	v4.0	- 13.12.25 - change the read-write organization to use
##			     less memory than previous
##	v4.5	- 13.12.27 - fixed a bug in the sdf file reading
##			     added functions to read GZip and BZip2 files
##      v5.0    - 14.05.27 - change Histogram range, allow optional input
##      v6.0    - 16.12.21 - read sdf if name has ::
##      v6.1    - 17.11.13 - chomp on SDF ligand name to avoid backspaces
##
##	Take the .fred_score.txt generated by OpenEye FRED docking
##	to rank the molecules.
##	Read in the SDF files to generate the consolidated SDF file of
##	ranked molecules.
##
##	Print out the top-ranking sdf molecules and generate a histogram.	
##
##	Required:	fred_screen_preprocess.py
##			*.fred_score.txt
##			*.docked.sdf
##
#######################################################################

import sys
MSG = '''\n  ## Usage: x.py 
             [score files: txt] [sdf files: sdf]
             [Number of Top MOL in output: int]
             [docking software: fred | sch | etc]
             [Prefix of Output sdf, png, and txt files]
             [optional: -hmax=<default -14.0>: float]
             [optional: -hmin=<default  -2.0>: float] ##

         ##  TXT and SDF files can also be in GZip/BZip2 format
         e.g.: x.py "*_score.txt" "*.sdf" 
               1000 sch ksr-allost -hmax=-16.0 -hmin=-2.0\n'''
if len(sys.argv) < 5 or len(sys.argv) > 8: sys.exit(MSG)

import glob,re,gzip,bz2,gc
from CommonUtility import file_handle
from rdkit_grid_print import grid_print

#### Default boundary constant for Histogram and changes ####
upper = -14.0
lower = -2.0
grid  = False

for argv in sys.argv:
  if re.search(r'-hmax=', argv): upper = float(argv.split('=')[1])
  if re.search(r'-hmin=', argv): lower = float(argv.split('=')[1])
  if re.search(r'-png', argv):   grid  = True

############################################################################
def doit(all_top):
    All_Data   = []
    All_Histo  = []
    dock       = sys.argv[4]
    prefix     = sys.argv[5]

    # Read in .fred_score.txt
    File_Names = glob.glob(sys.argv[1])
    print("Score File: ")
    print(File_Names)

    # Read in SDF file name
    SDF_Names =  glob.glob(sys.argv[2])
    print("SDF File: ")
    print(SDF_Names)

    tot_en = 0  # ligand with exceedingly high energy
    ## From the .fred_score.txt, extract the scores for ranking
    for file_name in File_Names:
        high_en = 0 # ligand with exceedingly high energy

        print('file_name: '+file_name)
        ## FILE PREFIX SELECTION MAY NEED MANUAL CHANGES ACCORDING TO 
        ## FILE NAMING CONVENTION
        Name_Pref = file_name.split('.')
        file_pref = Name_Pref[0]+'.'+str(Name_Pref[1])

        handle = file_handle(file_name)
        with handle as f:
            for idx, line in enumerate(f):
                if re.search(r'Title', line): print("Reading...")
                else:
                  try:
                    num = float(line.split()[1])
                    if num > 20.0:
                      high_en += 1
                      tot_en  += 1
                    else:
                      score = float(line.split()[1])
                  except ValueError:
                    pass
                  name  = str(line.split()[0])
                  All_Data.append([score, name])
                  All_Histo.append(score)

    	# Print the file number for every 1000 read
                if idx % 10000 == 0: print(idx)

        print('# Ligand with high energy (>20): {0}'.format(high_en))
    print ('# Total Ligand with high energy (>20): {0}'.format(tot_en))

    All_Data.sort(lambda x,y: cmp(float(x[0]), float(y[0])))
    ## Make histogram of ditribution of FRED scores
    Histogram(All_Histo, All_Data, len(All_Data), prefix, all_top, 
              dock, upper, lower)
    print("\n  ## Finished plotting overall Top-Ranks ##\n {0} / {1}\n\n".
            format(upper, lower))
    
    ## Read in top SDF files and build ranked SDF file
    make_sdf(SDF_Names, All_Data, all_top, dock, prefix)


#######################################################################
## Build a database of molecules from SDF files
def make_sdf(SDF_Names, All_Data, all_top, dock, prefix):
  from rdkit import Chem
  
  ## Build a Top-Selection list, with a 1.5x head-room for failed molecules 
  print("  ## User-defined output total: "+str(all_top))
  Top_Hash = {}
  Top_List = []		# [(Score, Name), ...]
  for rank, List in enumerate(All_Data):
    Top_Hash[List[1]] = List[0]
    Top_List.append(List)
    if rank == (all_top * 2)-1: break

  ## Build a library of molecules found in the Top-Selction List
  Top_sdf = {}
  for sdf_file in SDF_Names:
    print("  # Reading SDF file: "+sdf_file)
    sdf_handle = file_handle(sdf_file)
    Temp_sdf = [x for x in Chem.ForwardSDMolSupplier(sdf_handle,removeHs=False)
                  if x is not None]
    print("  # SDF mol read in from > "+sdf_file+" <: "+str(len(Temp_sdf)))

    ## Rename ligand name if previously processed with '::' tag
    if re.search(r'::', Temp_sdf[0].GetProp('_Name')):
      print('  # Remove "::" tag from ligand name #')
      Temp_sdf = RenameSDF(Temp_sdf)

    prev_name = ''
    for idx, mol in enumerate(Temp_sdf):
      if idx % 10000 == 0: print " Mol compared {0}".format(idx)

      ## RDKit may not handle the molecules and make a 'NoneType' item
      ## 'Could not sanitize molecule ending'. Ignore this molecule
      try:
        name = mol.GetProp('_Name')
      except AttributeError:
        print("A molecule failed after this molecule ID: "+prev_name)
        continue
      prev_name = name
      if Top_Hash.get(name.strip()):
        Top_sdf[name.strip()] = mol
    del Temp_sdf	# Free memory


  ## Use the Ranked list to rebuild a consolidated SDF 
  SDF = []
  if all_top >= 1000:
    top_name = prefix+'.'+dock+'_top'+str(all_top/1000)+'k'
    w   = Chem.SDWriter(top_name+'.sdf')
    OUT = open(top_name+'.txt', 'w')
  else:
    top_name = prefix+'.'+dock+'_top'+str(all_top)
    w   = Chem.SDWriter(top_name+'.sdf')
    OUT = open(top_name+'.txt', 'w')

  for idx, Item in enumerate(Top_List):
    score = Item[0]
    name  = Item[1]
    if Top_sdf.get(name):
      mol   = Top_sdf[name]
    else:
      print(" --> Molecule {0} is not found <--".format(name))
      continue

    ## If the FRED mol_name has conformer number appended on it, remove _NUM
    if re.search(r'_', name):
      name = name.split('_')[0]

             ## (ZINC, Rank, Score, FRED)
    mol.SetProp('_Name', name+'::'+str(idx+1)+'::'+str("%.1f" % float(score))+'::FRED')
    w.write(mol)
    OUT.write(name+"\t"+str(score)+"\n")
    SDF.append(mol)

    ## Close all files when reached the Max. output number
    if idx == all_top-1: 
      print("\n ## Total Molecule Ouptut: "+str(idx+1))
      OUT.close()
      w.flush()
      w.close()
      gc.collect()
      break

  if grid is True: grid_print(fred_top_name, SDF, 'sdf')


#######################################################################
## if "ligand name" has '::' due to previous rdkit processing, remove the
## added data and just the "name" again
def RenameSDF(sdfs):
  NewData = []
  for mol in sdfs:
    name = mol.GetProp('_Name')
    mol.SetProp('_Name', name.split('::')[0])
    NewData.append(mol)
  return NewData


#######################################################################
## Plot Histogram of Score distribution
def Histogram(Histo, Part, num_mol, name, top, dock, UPPER, LOWER ):
    import numpy as np
    import matplotlib.pyplot as plt

    bin_upper = UPPER
    bin_lower = LOWER
    bin_size  = 0.2
    text_high = num_mol/22.5
    text_hori = 0.3
   
    i = bin_upper
    Bins_Range = []
    while i < bin_lower:
        Bins_Range.append(i)
        i = i+bin_size

    fig, ax = plt.subplots()
    plt.figure(num=1, figsize=(8,6), dpi=150)

    ax.hist(Histo, Bins_Range, histtype='step', color='0.25')
    plt.xlabel(dock.upper()+' Score')
    plt.ylabel('No. of Molecule')
    plt.title( name+": "+str(num_mol) )
    plt.xlim([UPPER, LOWER])

    ## Draw a vertical line to indicate the Top hits
    ax.axvline( x=Part[top-1][0], ymin=0, ymax=1000, 
                color='r', linewidth=2 )
    top_num = 'Top '+str(top)+': '+str(Part[top-1][0])
    ax.text( Part[top-1][0]-text_hori, text_high, 
             top_num, rotation=90, color='b' )
    print(top_num)

    ## Draw a vertical line to indicate the Median Score
    ax.axvline( x=np.median(Histo), ymin=0, ymax=1000, 
                color='b', linewidth=2 )
    median = 'Median: '+str(np.median(Histo))
    ax.text( np.median(Histo)-text_hori, text_high, 
             median, rotation=90, color='b' )
    print(median)

    ## Draw 2 vertical lines to indicate the standard deviation
    ax.axvline( x=(np.median(Histo)+np.std(Histo)), 
                ymin=0, ymax=1000, color='k', linewidth=1.2 )
    ax.axvline( x=(np.median(Histo)-np.std(Histo)), 
                ymin=0, ymax=1000, color='k', linewidth=1.2 )
    stdev = 'StDev: '+str(np.around(np.std(Histo), decimals=2) )
    ax.text( np.median(Histo)+np.std(Histo)-text_hori, text_high, 
             stdev, rotation=90, color='k' )
    print(stdev)

#    plt.show()
    if top >= 1000:
      plt.savefig( name+'.'+dock+'_top'+str(top/1000)+'k.histo.png', dpi=150 )
    else:
      plt.savefig( name+'.'+dock+'_top'+str(top)+'.histo.png', dpi=150 )
    plt.close()


############################################################################
if __name__ == '__main__':
    doit(int(sys.argv[3]))
