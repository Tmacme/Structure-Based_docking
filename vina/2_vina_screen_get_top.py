#! /usr/bin/env python

#######################################################################
##
##	Peter M.U. Ung @ MSSM
##	
##	v1.0	- 13.10.30 - modified from original vina script
##	v2.0	- 13.10.31 - added ability to read in multiple data files
##
##	Take the .vina_score.txt generated by vina_screen_preprocess.py
##	to rank the molecules.
##	Print out the top-ranking pdbqt filenames and generate a histogram	
##
##	Required:	vina_screen_preprocess.py
##			*.vina_score.txt
##
#######################################################################

import sys,re

if len(sys.argv) != 5 :
    MSG = '''\n  ## Usage: x.py [VINA score files] [sub top num] [all top num]
                 [Prefix of Output sdf, png, and txt files] ## 
                 e.g.: x.py f="*.vina_score.txt",aa.1.vina_score.txt 
                            50 1000 ksr-allost\n'''
    sys.exit(MSG)

import glob,gzip,bz2
import numpy as np
import matplotlib.pyplot as plt
#import matplotlib.patches as patches
#import matplotlib.path as path
from mpl_toolkits.mplot3d import Axes3D
from CommonUtility import *

############################################################################
def doit(sub_top, all_top):
    All_Data   = []
    All_Histo  = []
    Histo_3D   = []

    ## Get the vina_score result files
    File_Names =  glob.glob(sys.argv[1])
    print File_Names

    ## For each of the vina_score result files, get the data
    print File_Names
    for file_name in File_Names:
        Sub_Data  = []
        Sub_Part  = []
        Sub_Histo = []

        print 'file_name: '+file_name
        ## FILE PREFIX SELECTION MAY NEED MANUAL CHANGES ACCORDING TO 
        ## FILE NAMING CONVENTION
        Name_Pref = file_name.split('.')
        file_pref = Name_Pref[0]+'.'+str(Name_Pref[1])

        with file_handle(file_name) as f:
            for idx, line in enumerate(f):
                if not re.search(r'::', line): continue
                Items = line.split('::')
                 ## REMARK VINA RESULT: <Score> <0.00> <0.00>
                result = float(Items[1].split()[3])
                name   = str  (Items[0])
                All_Data.append([result, name, file_pref])
                Sub_Data.append([result, name, file_pref])
                All_Histo.append(result)
                Sub_Histo.append(result)

    	# Print the file number for every 1000 read
                if idx % 10000 == 0: print idx

            Histo_3D.append([Name_Pref[1], file_pref, Sub_Histo])

            Sub_Data.sort(lambda x,y: cmp(float(x[0]), float(y[0])))
            Sub_Part = Sub_Data[:sub_top]
            print_score(Sub_Part, file_pref, sub_top)
            histogram(Sub_Histo, Sub_Part, len(Sub_Data), file_pref, sub_top)
        print "\n  ## Finished plotting Top-Ranks of individual sets ##\n\n"

    All_Data.sort(lambda x,y: cmp(float(x[0]), float(y[0])))
    All_Part = All_Data[:all_top]
    print_score(All_Part, sys.argv[4], all_top)
    histogram(All_Histo, All_Part, len(All_Data), sys.argv[4], all_top)
    print "\n  ## Finished plotting overall Top-Ranks ##\n\n"

    Histo_3D.sort(lambda x,y: cmp(float(x[0]), float(y[0])))
    Histo_3D.append([len(Histo_3D)+1, sys.argv[4]+'-overall', All_Histo])
    histogram3D(Histo_3D)


############################################################################
## Print out the names of top ranking models
def print_score(Part, name, top):
    OUT = open(name+".vina_top"+str(top)+".txt", 'w')
    for num, P in enumerate(Part):
        OUT.write(str(num+1)+"    "+P[2]+"  "+P[1]+"   "+str(P[0])+"\n")
    OUT.close()


#######################################################################
## Plot Histogram of Score distribution
def histogram(Histo, Part, num_mol, name, top):
    i = -11.0
    Bins_Range = []
    while i < -3.0:
        Bins_Range.append(i)
        i = i+0.2

    fig, ax = plt.subplots()
    plt.figure(num=1, figsize=(8,6), dpi=150)

    ax.hist(Histo, Bins_Range, histtype='step', color='0.25')
    plt.xlabel('Vina Score')
    plt.ylabel('No. of Molecule')
    plt.title( name+": "+str(num_mol) )

    ## Draw a vertical line to indicate the Top hits
    ax.axvline( x=Part[-1][0], ymin=0, ymax=1000, 
                color='r', linewidth=2 )
    top_num = 'Top '+str(top)+': '+str(Part[-1][0])
    ax.text( Part[-1][0]-0.22, num_mol/20, 
             top_num, rotation=90, color='b' )

    ## Draw a vertical line to indicate the Median Score
    ax.axvline( x=np.median(Histo), ymin=0, ymax=1000, 
                color='b', linewidth=2 )
    median = 'Median: '+str(np.median(Histo))
    ax.text( np.median(Histo)-0.22, num_mol/20, 
             median, rotation=90, color='b' )

    ## Draw 2 vertical lines to indicate the standard deviation
    ax.axvline( x=(np.median(Histo)+np.std(Histo)), 
                ymin=0, ymax=1000, color='k', linewidth=1.2 )
    ax.axvline( x=(np.median(Histo)-np.std(Histo)), 
                ymin=0, ymax=1000, color='k', linewidth=1.2 )
    stdev = 'StDev: '+str(np.around(np.std(Histo), decimals=2) )
    ax.text( np.median(Histo)+np.std(Histo)-0.22, num_mol/20, 
             stdev, rotation=90, color='k' )

#    plt.show()
    plt.savefig( name+'.vina_top'+str(top)+'.histo.png', dpi=150 )
    plt.close()


############################################################################
## Make 3D Histogram showing all distribution
def histogram3D(Histo_List):
    i = -11.0
    Bins_Range = []
    while i < -3.0:
        Bins_Range.append(i)
        i = i+0.2

    fig = plt.figure(num=1, figsize=(8,6), dpi=150)
    ax  = fig.add_subplot(111, projection='3d')
    ax.set_xlabel('Vina Score')
    ax.set_ylabel('Set')
    ax.set_zlabel('No. of Molecule')

    for idx, Histo in enumerate(Histo_List):
        Bin_Num, Bin_Edges = np.histogram(Histo[2], Bins_Range)

#        ax.axvline(x=np.median(Histo[2]), ymin=0, zdir='y', ymax=1000, 
#                   color='b', linewidth=2 )
#        if idx != Histo_List[-1][0]-1:
        ax.bar(Bin_Edges[:-1], Bin_Num, zs=idx, zdir='y',
               width=0.2, color='0.5', alpha=1.)
#        else:
#            New_Num = []
#            for x, num in enumerate(Bin_Num):
#                New_Num.append((num*2/len(Histo_List)))
#            ax.bar(Bin_Edges[:-1], New_Num, zs=idx, zdir='y', 
#                   width=0.2, color='w', alpha=.5)

#    plt.show()
    plt.savefig( Histo_List[-1][1]+'.vina_histo.png', dpi=300 )
    plt.close()


############################################################################
if __name__ == '__main__':
    doit(int(sys.argv[2]), int(sys.argv[3]))
